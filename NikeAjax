vex::brain Brain = vex::brain();
vex::controller Primary_Controller = vex::controller();
vex::controller Partner_Controller = vex::controller(vex::controllerType::partner);
vex::motor DriveLeft = vex::motor(vex::PORT1, vex::gearSetting::ratio18_1, false);
vex::motor DriveRight = vex::motor(vex::PORT2, vex::gearSetting::ratio18_1, true);
vex::motor Intake = vex::motor(vex::PORT3, vex::gearSetting::ratio18_1, true); 
vex::motor Indexer = vex::motor(vex::PORT4, vex::gearSetting::ratio18_1, true);
vex::motor Flywheel1 = vex::motor(vex::PORT5, vex::gearSetting::ratio18_1, false);//lower motor
vex::motor LiftA = vex::motor(vex::PORT6, vex::gearSetting::ratio18_1, false);
vex::motor LiftB = vex::motor(vex::PORT7, vex::gearSetting::ratio18_1, true);
//port 8 damaged
vex::motor Claw = vex::motor(vex::PORT9, vex::gearSetting::ratio18_1, false);
vex::gyro Gyro = vex::gyro(Brain.ThreeWirePort.D);
#include <cmath>

//vex::drivetrain dt(DriveLeft, DriveRight, (4.125*M_PI), 15.1, vex::distanceUnits::in);
//vex::drivetrain (motor DriveLeft, motor DriveRight, double circumfrence=4.125*M_PI, double robotWidth=15.1, distanceUnits unit=distanceUnits::in)

namespace math {
    
    
    class Translation2d {
        public:
            double x;
            double y;
        
            Translation2d(double x, double y);
            Translation2d(Translation2d& translation);
            ~Translation2d();
            
    };
    class Rotation {
        public:
            double sin;
            double cos;
            
            Rotation(); //identity constructor
            Rotation(double sin, double cos);
            Rotation(Rotation& rotation);
            ~Rotation();
        
            void rotateBy(Rotation& rotation);
        
            
    };
    class Pose2d {
        public:
            Translation2d& translation;
            Rotation& yaw;
            
            Pose2d();
            Pose2d(Translation2d& translation, Rotation& yaw);
            ~Pose2d();
        
            void operator^(Pose2d& pose); //chain
            void operator+(Translation2d& translation);
            void operator+(Rotation& yaw);
    };
    
    
    double hypot(Rotation& rot) {
        return sqrt(rot.sin * rot.sin + rot.cos * rot.cos);
    }
    
}
    
//*****************************************************************************************************************

#include "robot-config.h"
#include <cmath>

vex::competition    Competition;

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */ 
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

using namespace vex;

void draw_grid(void) { 
    Brain.Screen.setPenColor(color::white);
    
    for (int i = 0; i < 2; i ++) {
        //this draws vertical lines. The X stays the same but the Y changes:
        Brain.Screen.drawLine(160*(i+1),0,160*(i+1),240);
        //this draws horizontal lines. The X changes but the Y stays the same:
        Brain.Screen.drawLine(0,80*(i+1),480,80*(i+1));
    }
}

void draw_touch() {
    Brain.Screen.setPenColor(color::red);
    //this draws a circle around the place the user is touching or last touched the LCD
    Brain.Screen.drawCircle(Brain.Screen.xPosition(),Brain.Screen.yPosition(),30);
}

void pre_auton( void ) {
  
    Primary_Controller.Screen.setCursor(0, 0);
    Partner_Controller.Screen.setCursor(0, 0);
    
    Primary_Controller.Screen.print("Driver Controller");
    Partner_Controller.Screen.print("Gunner Controller");
    
    LiftA.resetRotation();
    LiftB.resetRotation();
    Claw.resetRotation();
    
    Brain.Screen.render(true,false); //set VSync (vertical sync) on, automatic refresh to off
        //When we call Brain.Screen.render() with no arguments, it will force a redraw of the screen.
        //With the previous command here we turned off automatic redraws, so the LCD will only redraw
        //when we tell it to, which means we can guarantee it won't redraw in the middle of one of our
        //other drawing commands and give a partial picture. Getting partial pictures on redraws is
        //what causes flickering when drawing without this buffering scheme.
    /*while (!true) {
        Brain.Screen.clearScreen(); //clears the back buffer for drawing, default clear color is black
        draw_grid(); //draws our grid to the back buffer
        Brain.Screen.render(); //flips the back buffer to the screen all at once, preventing flickering
        if (Brain.Screen.pressing()) { //if screen is touched...
            while (Brain.Screen.pressing()) { //wait until the user stops touching the screen
                Brain.Screen.clearScreen(); //while waiting, maintain the grid and draw
                draw_grid();                //a touch indicator around the user's finger
                draw_touch();
                Brain.Screen.render();
            }
            vex::task::sleep(1000); //wait a second for their hand to get a little further away
            if (Brain.Screen.yPosition() > 160) {                   //released in bottom third of the screen
                if (Brain.Screen.xPosition() < 160) {                   //released in left third of the screen
                    //dt.turnFor(turnType::right,45,rotationUnits::deg);      //bottom left
                } else if (Brain.Screen.xPosition() > 320) {            //released in right third of the screen
                    //dt.turnFor(turnType::left,45,rotationUnits::deg);       //bottom right
                } else {                                                //released in middle (left-to-right) third of the screen
                    //dt.driveFor(directionType::fwd,6,distanceUnits::in);    //bottom middle
                }
            } else if (Brain.Screen.yPosition() < 80) {             //released in top third of the screen
                if (Brain.Screen.xPosition() < 160) {                   //released in left third of the screen
                    //dt.turnFor(turnType::right,135,rotationUnits::deg);     //top left
                } else if (Brain.Screen.xPosition() > 320) {            //released in right third of the screen
                    //dt.turnFor(turnType::left,135,rotationUnits::deg);      //top right
                } else {                                                //released in middle (left-to-right) third of the screen
                    //dt.driveFor(directionType::rev,6,distanceUnits::in);    //top middle
                }
            } else {                                                //released in middle (top-to-bottom) of the screen
                if (Brain.Screen.xPosition() < 160) {                   //released in left third of the screen
                    //dt.turnFor(turnType::right,90,rotationUnits::deg);      //middle left
                } else if (Brain.Screen.xPosition() > 320) {            //released in right third of the screen
                    //dt.turnFor(turnType::left,90,rotationUnits::deg);       //middle right
                } else {                                                //released in middle (left-to-right) third of the screen
                    //do nothing                                            //middle middle
                }
            }
            //dt.stop(brakeType::coast);
        } else {
            vex::task::sleep(20);
        }
    }*/
    while(true) {
       Brain.Screen.printAt(10,20,"%f%%",Gyro.value(rotationUnits::deg));
       Brain.Screen.render();
    }
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

double wheelDiameter = 4.125;
double circumference = wheelDiameter*M_PI;

double targetDistance;                                      //Calculates revs to turn from desired drive distance in inches
double linearRevs = targetDistance/circumference;

double degreesRotate;                                       //Calculates revs from desired turn angle in degrees
double robotDiam = 15.1;
double arc = (robotDiam*M_PI)/(360/degreesRotate);
double arcRevs = arc/circumference;

int move(){                                                 //go forward or backward
    while(1){
        DriveLeft.startRotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        DriveRight.rotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
    return(0);
    }
}
int turn(){                                                 //+deg = turn right, -deg = turn left
    while(1){
        DriveLeft.startRotateFor(vex::directionType::fwd, arcRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        DriveRight.rotateFor(vex::directionType::rev, arcRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
    return(0);
    }
}
int driveAuto(){
    while(1){
        
        Intake.startRotateFor(vex::directionType::fwd, 10, vex::rotationUnits::rev, 100, vex::velocityUnits::pct); 
        Flywheel1.spin(vex::directionType::fwd, 200, vex::velocityUnits::rpm);
        
        targetDistance = 25;                               //fwd 2 tiles
        DriveLeft.startRotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        DriveRight.rotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        
        targetDistance = -25;                              //backwrd 2 tiles
        DriveLeft.startRotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        DriveRight.rotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
    
        targetDistance = 2;                                 //fwd 2 in
        DriveLeft.startRotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        DriveRight.rotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);

        degreesRotate = -89;                                //turn left 89 deg
        DriveLeft.startRotateFor(vex::directionType::fwd, arcRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        DriveRight.rotateFor(vex::directionType::rev, arcRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        
        Indexer.rotateFor(vex::directionType::fwd, 1,vex::rotationUnits::rev, 100, vex::velocityUnits::pct);
        Intake.startRotateFor(vex::directionType::fwd, 1, vex::rotationUnits::rev, 100, vex::velocityUnits::pct);
        
        targetDistance = 12;                               //fwd 1 tiles
        DriveLeft.startRotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        DriveRight.rotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        
        Indexer.rotateFor(vex::directionType::fwd, 1,vex::rotationUnits::rev, 100, vex::velocityUnits::pct);
        
        degreesRotate = -15;                                //turn left 5 deg
        DriveLeft.startRotateFor(vex::directionType::fwd, arcRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        DriveRight.rotateFor(vex::directionType::rev, arcRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        
        Flywheel1.spin(vex::directionType::fwd, 25, vex::velocityUnits::pct);
        
        targetDistance = 6;                                //fwd .5 tiles
        DriveLeft.startRotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        DriveRight.rotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        
        targetDistance = -12;                              //backwrd 1 tile
        DriveLeft.startRotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        DriveRight.rotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);

        degreesRotate = 92;                                //turn right 92 deg
        DriveLeft.startRotateFor(vex::directionType::fwd, arcRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        DriveRight.rotateFor(vex::directionType::rev, arcRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        
        targetDistance = 24;                               //fwd 2 tiles
        DriveLeft.startRotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        DriveRight.rotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
            
        degreesRotate = -90;                               //turn left 90 deg
        DriveLeft.startRotateFor(vex::directionType::fwd, arcRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        DriveRight.rotateFor(vex::directionType::rev, arcRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        
        targetDistance = 12;                               //fwd one tile
        DriveLeft.startRotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        DriveRight.rotateFor(vex::directionType::fwd, linearRevs, vex::rotationUnits::rev, 100, vex::velocityUnits::rpm);
        
        Flywheel1.stop(vex::brakeType::coast);
    
    return(0);
    }
}
int intakeAuto(){
    while(1){
        Intake.rotateFor(vex::directionType::fwd, 3000, vex::timeUnits::msec, 100, vex::velocityUnits::pct); 
        Intake.rotateFor(vex::directionType::fwd, 3500, vex::timeUnits::msec, 50, vex::velocityUnits::pct); 
        Intake.rotateFor(vex::directionType::rev, 7500, vex::timeUnits::msec, 100, vex::velocityUnits::pct); 
    return(0);
    }
}
int indexerAuto(){
    while(1){
        vex::task::sleep(4000);
        Indexer.rotateFor(vex::directionType::fwd, 5,vex::rotationUnits::rev, 100, vex::velocityUnits::pct);
    return(0);
    }
}
int flywheelAuto(){
    while(1){
        Flywheel1.spin(vex::directionType::fwd, 200, vex::velocityUnits::rpm);
        vex::task::sleep(7500);
        Flywheel1.spin(vex::directionType::fwd, 25, vex::velocityUnits::pct);
        vex::task::sleep(2000);
        Flywheel1.stop(vex::brakeType::coast);
       return(0);
    }
}

int fireAuto(){
    while(1){
        vex::task t2c(flywheelAuto);
        vex::task t2b(indexerAuto);
        vex::task t2a(intakeAuto);
    return(0);
    }
}
    
void autonomous( void ) {
  // ..........................................................................
    vex::task t1(driveAuto);
  // ..........................................................................
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

//dt.driveFor(vex::directionType::fwd,24,vex::distanceUnits::mm, 100, vex::velocityUnits::rpm);
void testAutonomous(){
    
}

void intake(){
    Intake.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct); 
}
void stopIntake(){
    Intake.stop(vex::brakeType::brake);
    Indexer.stop(vex::brakeType::brake);
}
void outtake(){
    Indexer.rotateFor(vex::directionType::fwd, 120,vex::rotationUnits::deg, 100,vex::velocityUnits::pct);
    Intake.rotateFor(vex::directionType::rev,3, vex::rotationUnits::rev, 100, vex::velocityUnits::pct);
}
void fire(){
    Indexer.startRotateFor(vex::directionType::fwd, 360, vex::rotationUnits::deg, 100, vex::velocityUnits::pct); 
    Intake.rotateFor(vex::directionType::fwd, 180, vex::rotationUnits::deg, 100, vex::velocityUnits::pct); 
}
void speedUp(){
    Flywheel1.spin(vex::directionType::fwd, 200, vex::velocityUnits::rpm);
}
void slowDown(){
    Flywheel1.spin(vex::directionType::fwd, 25, vex::velocityUnits::pct);   
}
void liftGround(){                   //tucks claw while going down to prevent damage and allow for immediate movement awat from post
    LiftA.startRotateTo(0, vex::rotationUnits::deg, 100, vex::velocityUnits::pct);
    LiftB.rotateTo(0, vex::rotationUnits::deg, 100, vex::velocityUnits::pct);
    /*
    vex::task::sleep(1000);
    Claw.rotateTo(0, vex::rotationUnits::deg, 50, vex::velocityUnits::pct);
    
    Claw.stop(vex::brakeType::hold);
    LiftA.rotateTo(0, vex::rotationUnits::deg, 100, vex::velocityUnits::pct);
    LiftB.rotateTo(0, vex::rotationUnits::deg, 100, vex::velocityUnits::pct);
    */
    LiftA.stop(vex::brakeType::hold);
    LiftB.stop(vex::brakeType::hold);
}
void liftLowPost(){
    LiftA.startRotateTo(1400, vex::rotationUnits::deg, 100, vex::velocityUnits::pct);
    LiftB.rotateTo(1400, vex::rotationUnits::deg, 100, vex::velocityUnits::pct);
    LiftA.stop(vex::brakeType::hold);
    LiftB.stop(vex::brakeType::hold);
}
void liftHighPost(){
    LiftA.startRotateTo(1800, vex::rotationUnits::deg, 100, vex::velocityUnits::pct);
    LiftB.rotateTo(1800, vex::rotationUnits::deg, 100, vex::velocityUnits::pct);
    LiftA.stop(vex::brakeType::hold);
    LiftB.stop(vex::brakeType::hold);
}
void clawDown(){
    Claw.rotateTo(1027, vex::rotationUnits::deg, 50, vex::velocityUnits::pct);
    Claw.stop(vex::brakeType::hold);
}
void clawUp(){                                              //macro to flip caps to opposite color, raises claw
    Claw.rotateTo(550, vex::rotationUnits::deg, 50, vex::velocityUnits::pct);
    vex::task::sleep(100);
    Claw.rotateTo(630, vex::rotationUnits::deg, 25, vex::velocityUnits::pct);
    Claw.rotateTo(600, vex::rotationUnits::deg, 50, vex::velocityUnits::pct);
    Claw.stop(vex::brakeType::hold);
}
void clawHide(){
    Claw.rotateTo(0, vex::rotationUnits::deg, 50, vex::velocityUnits::pct);
    Claw.stop(vex::brakeType::hold);
}
void stopAll(){
    DriveLeft.stop(vex::brakeType::brake);
    DriveRight.stop(vex::brakeType::brake);
    Intake.stop(vex::brakeType::brake);
    Indexer.stop(vex::brakeType::brake);
    Flywheel1.stop(vex::brakeType::coast);
    LiftA.stop(vex::brakeType::brake);
    LiftB.stop(vex::brakeType::brake);
    Claw.stop(vex::brakeType::brake);
}

void usercontrol( void ) {
  while (true) {   
    // ........................................................................
      //tank drive controls
      
      if((Primary_Controller.Axis3.value()<10)||(Primary_Controller.Axis3.value()>-10))
        DriveLeft.spin(vex::directionType::fwd, (Primary_Controller.Axis3.value()*.75), vex::velocityUnits::pct);
        
      if((Primary_Controller.Axis2.value()<10)||(Primary_Controller.Axis2.value()>-10))
        DriveRight.spin(vex::directionType::fwd, (Primary_Controller.Axis2.value()*.75), vex::velocityUnits::pct);
              
      /*
      //fine-tuning lift and claw with horizontal joystick axis
      if((Primary_Controller.Axis4.value()<10)||(Primary_Controller.Axis4.value()>-10)){
        LiftA.spin(vex::directionType::fwd, (Primary_Controller.Axis4.value()*1), vex::velocityUnits::pct);
        LiftB.spin(vex::directionType::fwd, (Primary_Controller.Axis4.value()*1), vex::velocityUnits::pct);
      }
      else
      if((Primary_Controller.Axis1.value()<10)||(Primary_Controller.Axis1.value()>-10))
        Claw.spin(vex::directionType::fwd, (Primary_Controller.Axis1.value()*1), vex::velocityUnits::pct);
      else
      */
          
      Primary_Controller.ButtonL1.pressed(intake);          //press and hold L1 to intake
      Primary_Controller.ButtonL1.released(stopIntake);
      
      Primary_Controller.ButtonL2.pressed(outtake);         //press to regurgitate balls or flip caps-may need multiple presses
      //Primary_Controller.ButtonL2.released(stopIntake);   
    
      Primary_Controller.ButtonR2.pressed(fire);            //press to fire 1 ball
            
      Primary_Controller.ButtonR1.pressed(speedUp);         //press and hold to achieve max flywheel velocity
      Primary_Controller.ButtonR1.released(slowDown);       //release to allow flywheel to idle during down time
      
      Primary_Controller.ButtonDown.pressed(liftGround);    //sets lift to ground and tucks claw to prevent damage and allow movement
      Primary_Controller.ButtonLeft.pressed(liftLowPost);   //sets lift to low post height
      Primary_Controller.ButtonUp.pressed(liftHighPost);    //sets lift to high post height
      
      Primary_Controller.ButtonX.pressed(clawHide);         //sets claw to tucked starting position to protect the claw in down time
      Primary_Controller.ButtonA.pressed(clawUp);           //macro - flips cap within claw
      Primary_Controller.ButtonB.pressed(clawDown);         //sets claw to ground
            
      Primary_Controller.ButtonY.pressed(stopAll);          //stop all motors for safety
      Primary_Controller.ButtonRight.pressed(testAutonomous);//testing testing

      vex::task::sleep(20); //sleep the task for a short amount of time to prevent wasted resources.  
    // ........................................................................
   }        
}

// Main will set up the competition functions and callbacks.
int main() {
    pre_auton();
    Competition.autonomous( autonomous );
    Competition.drivercontrol( usercontrol );
    while(true) {
      vex::task::sleep(20);
    }    
}
