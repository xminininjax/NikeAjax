#pragma config(Motor,  port2,           Extendo,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           LeftDrive,     tmotorVex393_MC29, openLoop, driveLeft)
#pragma config(Motor,  port4,           RightDrive,    tmotorVex393_MC29, openLoop, driveRight)
#pragma config(Motor,  port5,           LeftScissor,   tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           RightScissor,  tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port7,           Intake,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           Claw,          tmotorVex393_MC29, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        succy boy                                                          */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//OFFENSIVE
#define offensive false

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"
#include "KnightLib.c"

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton() {
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks
	// running between Autonomous and Driver controlled modes. You will need to
	// manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...


}
task up_auto() {
	motor[LeftScissor] = 127;
	motor[RightScissor] = -127;
	sleep(1500);
	motor[LeftScissor] = 0;
	motor[RightScissor] = 0;
}

task forward_to_mobile_goal_auto() {
	motor[LeftDrive] = 127;
	motor[RightDrive] = 127;
	sleep(2336);
	motor[LeftDrive] = 0;
	motor[RightDrive] = 0;
}

task out_auto() {
	motor[Intake] = 127;
	sleep(900);
	motor[Intake] = 0;
}

task in_auto() {
	motor[Intake] = -127;
	sleep(1000);
	motor[Intake] = 0;
}

/*task drop_it_like_its_hot() {
motor[LeftScissor] = -67;
motor[RightScissor] = 67;
sleep(250);
motor[LeftScissor] = 0;
motor[RightDrive] = 0; <----------------------
motor[Claw] = -127;
sleep(750);
motor[Claw] = 0;
}*/

task SCAM() {
	motor[LeftDrive] = -127;
	motor[RightDrive] = -127;
	sleep(1300);
	motor[RightDrive] = 0;
	sleep(2300);
	motor[LeftDrive] = 127;
	motor[RightDrive] = 127;
	sleep(850);
	motor[LeftDrive] = 80;
	motor[RightDrive] = 80;
	sleep(1550);
	motor[LeftDrive] = 0;
	motor[RightDrive] = 0;
}

task out_2_auto() {
	motor[Intake] = 127;
	sleep(1000);
	motor[Intake] = 0;
}
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous() {
	// ..........................................................................
	// Insert user code here.
	// ..........................................................................
	//motor[Claw] = 127;

	if(offensive) {
		motor[LeftDrive] = 127;
		motor[RightDrive] = 127;
		sleep(15000);
		return;
	}


	//STEP 1 - UP
	startTask(up_auto);

	//STEP 2 - FORWARD
	startTask(forward_to_mobile_goal_auto);

	sleep(950);
	//STEP 3 - OUT
	startTask(out_auto);

	sleep(1386);

	//STEP 4 - IN
	startTask(in_auto);

	sleep(1000);


	//STEP 4.5 - DROP

	//startTask(drop_it_like_its_hot);
	//sleep(1000);

	//STEP 5 - S.C.A.M.
	startTask(SCAM);

	sleep(6000);

	//STEP 6 - OUT 2
	startTask(out_2_auto);

	sleep(1000);

	//STEP 7 - BACK

	motor[LeftDrive] = -127;
	motor[RightDrive] = -127;
	sleep(1000);
	motor[Intake] = -127;

	sleep(1000);
	motor[Intake] = 0;


	motor[LeftDrive] = 0;
	motor[RightDrive] = 0;
}



/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task usercontrol() {
	// User control code here, inside the loop

	while (true) {
		tankControl(Ch3, Ch2, 10);


		bool leftScissorUp = vexRT[Btn5UXmtr2] == 1;
		bool leftScissorDown = vexRT[Btn5DXmtr2] == 1;

		bool rightScissorUp = vexRT[Btn6UXmtr2] == 1;
		bool rightScissorDown = vexRT[Btn6DXmtr2] == 1;

		bool clawBlowDown = (vexRT[Btn8UXmtr2] == 1 || vexRT[Btn8U] == 1 || vexRT[Btn6U] == 1);
		bool clawSuckUp = (vexRT[Btn8DXmtr2] == 1 || vexRT[Btn8D] == 1 || vexRT[Btn6D] == 1);

		bool intakeOut = (vexRT[Btn7D] == 1 || vexRT[Btn5D] == 1);
		bool intakeIn = (vexRT[Btn7U] == 1 || vexRT[Btn5U] == 1);

		int extendyBoy = vexRT[Ch3Xmtr2];

		switchOnButton(leftScissorUp, leftScissorDown, LeftScissor, 127);
		switchOnButton(rightScissorUp, rightScissorDown, LeftScissor, 127);

		switchOnButton(leftScissorUp, leftScissorDown, RightScissor, -127);
		switchOnButton(rightScissorUp, rightScissorDown, RightScissor, -127);

		switchOnButton(clawSuckUp, clawBlowDown, Claw, -127);

		switchOnButton(intakeOut, intakeIn, Intake, 127);

		singleJoystickWrite(extendyBoy, Extendo, 10);
		if(vexRT[Btn8R]) {
			startTask(autonomous);
			sleep(15000);
		}
	}
}
